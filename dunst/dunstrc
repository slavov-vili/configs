[global]
    ### display ###

    # which monitor should the notifications be displayed on.
    monitor = 0

    # display notification on focused monitor.  possible modes are:
    #   mouse: follow mouse pointer
    #   keyboard: follow window with keyboard focus
    #   none: don't follow anything
    #
    # "keyboard" needs a window manager that exports the
    # _net_active_window property.
    # this should be the case for almost all modern window managers.
    #
    # if this option is set to mouse or keyboard, the monitor option
    # will be ignored.
    follow = mouse

    # the geometry of the window:
    #   [{width}]x{height}[+/-{x}+/-{y}]
    # the geometry of the message window.
    # the height is measured in number of notifications everything else
    # in pixels.  if the width is omitted but the height is given
    # ("-geometry x2"), the message window expands over the whole screen
    # (dmenu-like).  if width is 0, the window expands to the longest
    # message displayed.  a positive x is measured from the left, a
    # negative from the right side of the screen.  y is measured from
    # the top and down respectively.
    # the width can be negative.  in this case the actual width is the
    # screen width minus the width defined in within the geometry option.
    geometry = "300x10-30+20"

    # show how many messages are currently hidden (because of geometry).
    indicate_hidden = yes

    # shrink window if it's smaller than the width.  will be ignored if
    # width is 0.
    shrink = no

    # the transparency of the window.  range: [0; 100].
    # this option will only work if a compositing window manager is
    # present (e.g. xcompmgr, compiz, etc.).
    transparency = 0

    # the height of the entire notification.  if the height is smaller
    # than the font height and padding combined, it will be raised
    # to the font height and padding.
    notification_height = 0

    # draw a line of "separator_height" pixel height between two
    # notifications.
    # set to 0 to disable.
    separator_height = 3

    # padding between text and separator.
    padding = 10

    # horizontal padding.
    horizontal_padding = 10

    # defines width in pixels of frame around the notification window.
    # set to 0 to disable.
    frame_width = 0

    # defines color of the frame around the notification window.
    frame_color = "#aaaaaa"

    # define a color for the separator.
    # possible values are:
    #  * auto: dunst tries to find a color fitting to the background;
    #  * foreground: use the same color as the foreground;
    #  * frame: use the same color as the frame;
    #  * anything else will be interpreted as a x color.
    separator_color = auto

    # sort messages by urgency.
    sort = yes

    # don't remove messages, if the user is idle (no mouse or keyboard input)
    # for longer than idle_threshold seconds.
    # set to 0 to disable.
    # a client can set the 'transient' hint to bypass this. see the rules
    # section for how to disable this if necessary
    idle_threshold = 120

    ### text ###

    font = monospace 9

    # the spacing between lines.  if the height is smaller than the
    # font height, it will get raised to the font height.
    line_height = 1

    # possible values are:
    # full: allow a small subset of html markup in notifications:
    #        <b>bold</b>
    #        <i>italic</i>
    #        <s>strikethrough</s>
    #        <u>underline</u>
    #
    #        for a complete reference see
    #        <https://developer.gnome.org/pango/stable/pango-markup.html>.
    #
    # strip: this setting is provided for compatibility with some broken
    #        clients that send markup even though it's not enabled on the
    #        server. dunst will try to strip the markup but the parsing is
    #        simplistic so using this option outside of matching rules for
    #        specific applications *is greatly discouraged*.
    #
    # no:    disable markup parsing, incoming notifications will be treated as
    #        plain text. dunst will not advertise that it has the body-markup
    #        capability if this is set as a global setting.
    #
    # it's important to note that markup inside the format option will be parsed
    # regardless of what this is set to.
    markup = full

    # the format of the message.  possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %i  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    #   %n  progress value if set without any extra characters
    #   %%  literal %
    # markup is allowed
    format = "<b>%s</b>\n%b\n%p"

    # alignment of message text.
    # possible values are "left", "center" and "right".
    alignment = left

    # vertical alignment of message text and icon.
    # possible values are "top", "center" and "bottom".
    vertical_alignment = center

    # show age of message if message is older than show_age_threshold
    # seconds.
    # set to -1 to disable.
    show_age_threshold = 120

    # split notifications into multiple lines if they don't fit into
    # geometry.
    word_wrap = yes

    # when word_wrap is set to no, specify where to make an ellipsis in long lines.
    # possible values are "start", "middle" and "end".
    ellipsize = middle

    # ignore newlines '\n' in notifications.
    ignore_newline = no

    # stack together notifications with the same content
    stack_duplicates = false

    # hide the count of stacked notifications with the same content
    hide_duplicate_count = true

    # display indicators for urls (u) and actions (a).
    show_indicators = yes

    ### icons ###

    # align icons left/right/off
    icon_position = left

    # scale small icons up to this size, set to 0 to disable. helpful
    # for e.g. small files or high-dpi screens. in case of conflict,
    # max_icon_size takes precedence over this.
    min_icon_size = 0

    # scale larger icons down to this size, set to 0 to disable
    max_icon_size = 32

    # paths to default icons.
    icon_path = /usr/share/icons/Arc/:usr/share/icons/gnome/16x16/status/:/usr/share/icons/gnome/16x16/devices/

    ### history ###

    # should a notification popped up from history be sticky or timeout
    # as if it would normally do.
    sticky_history = yes

    # maximum amount of notifications kept in history
    history_length = 50

    ### misc/advanced ###

    # dmenu path.
    dmenu = /usr/bin/dmenu -p dunst:

    # browser for opening urls in context menu.
    browser = /usr/bin/firefox -new-tab

    # always run rule-defined scripts, even if the notification is suppressed
    always_run_script = true

    # define the title of the windows spawned by dunst
    title = dunst

    # define the class of the windows spawned by dunst
    class = dunst

    # print a notification on startup.
    # this is mainly for error detection, since dbus (re-)starts dunst
    # automatically after a crash.
    startup_notification = false

    # manage dunst's desire for talking
    # can be one of the following values:
    #  crit: critical features. dunst aborts
    #  warn: only non-fatal warnings
    #  mesg: important messages
    #  info: all unimportant stuff
    # debug: all less than unimportant stuff
    verbosity = mesg

    # define the corner radius of the notification window
    # in pixel size. if the radius is 0, you have no rounded
    # corners.
    # the radius will be automatically lowered if it exceeds half of the
    # notification height to avoid clipping text and/or icons.
    corner_radius = 1

    # ignore the dbus closenotification message.
    # useful to enforce the timeout set by dunst configuration. without this
    # parameter, an application may close the notification sent before the 
    # user defined timeout.
    ignore_dbusclose = false

    ### legacy

    # use the xinerama extension instead of randr for multi-monitor support.
    # this setting is provided for compatibility with older nvidia drivers that
    # do not support randr and using it on systems that support randr is highly
    # discouraged.
    #
    # by enabling this setting dunst will not be able to detect when a monitor
    # is connected or disconnected which might break follow mode if the screen
    # layout changes.
    force_xinerama = false

    ### mouse

    # defines list of actions for each mouse event
    # possible values are:
    # * none: don't do anything.
    # * do_action: if the notification has exactly one action, or one is marked as default,
    #              invoke it. if there are multiple and no default, open the context menu.
    # * close_current: close current notification.
    # * close_all: close all notifications.
    # these values can be strung together for each mouse event, and
    # will be executed in sequence.
    mouse_left_click = close_current
    mouse_middle_click = do_action, close_current
    mouse_right_click = close_all

# experimental features that may or may not work correctly. do not expect them
# to have a consistent behaviour across releases.
[experimental]
    # calculate the dpi to use on a per-monitor basis.
    # if this setting is enabled the xft.dpi value will be ignored and instead
    # dunst will attempt to calculate an appropriate dpi value for each monitor
    # using the resolution and physical size. this might be useful in setups
    # where there are multiple screens with very different dpi values.
    per_monitor_dpi = false

[shortcuts]

    # shortcuts are specified as [modifier+][modifier+]...key
    # available modifiers are "ctrl", "mod1" (the alt-key), "mod2",
    # "mod3" and "mod4" (windows-key).
    # xev might be helpful to find names for keys.

    # close notification.
    close = ctrl+space

    # close all notifications.
    close_all = ctrl+shift+space

    # redisplay last message(s).
    # on the us keyboard layout "grave" is normally above tab and left
    # of "1". make sure this key actually exists on your keyboard layout,
    # e.g. check output of 'xmodmap -pke'
    history = ctrl+grave

    # context menu.
    context = ctrl+shift+period

[urgency_low]
    # important: colors have to be defined in quotation marks.
    # otherwise the "#" and following would be interpreted as a comment.
    background = "#4C3750"
    foreground = "#888888"
    timeout = 7
    # icon for notifications with low urgency, uncomment to enable
    #icon = /path/to/icon

[urgency_normal]
    background = "#5F3764"
    foreground = "#FFFFFF"
    timeout = 7
    # icon for notifications with normal urgency, uncomment to enable
    #icon = /path/to/icon

[urgency_critical]
    background = "#900000"
    foreground = "#ffffff"
    //frame_color = "#ff0000"
    timeout = 0
    # icon for notifications with critical urgency, uncomment to enable
    #icon = /path/to/icon

# every section that isn't one of the above is interpreted as a rules to
# override settings for certain messages.
#
# messages can be matched by
#    appname (discouraged, see desktop_entry)
#    body
#    category
#    desktop_entry
#    icon
#    match_transient
#    msg_urgency
#    stack_tag
#    summary
#
# and you can override the
#    background
#    foreground
#    format
#    frame_color
#    fullscreen
#    new_icon
#    set_stack_tag
#    set_transient
#    timeout
#    urgency
#
# shell-like globbing will get expanded.
#
# instead of the appname filter, it's recommended to use the desktop_entry filter.
# glib based applications export their desktop-entry name. in comparison to the appname,
# the desktop-entry won't get localized.
#
# scripting
# you can specify a script that gets run when the rule matches by
# setting the "script" option.
# the script will be called as follows:
#   script appname summary body icon urgency
# where urgency can be "low", "normal" or "critical".
#
# note: if you don't want a notification to be displayed, set the format
# to "".
# note: it might be helpful to run dunst -print in a terminal in order
# to find fitting options for rules.

# disable the transient hint so that idle_threshold cannot be bypassed from the
# client
#[transient_disable]
#    match_transient = yes
#    set_transient = no
#
# make the handling of transient notifications more strict by making them not
# be placed in history.
#[transient_history_ignore]
#    match_transient = yes
#    history_ignore = yes

# fullscreen values
# show: show the notifications, regardless if there is a fullscreen window opened
# delay: displays the new notification, if there is no fullscreen window active
#        if the notification is already drawn, it won't get undrawn.
# pushback: same as delay, but when switching into fullscreen, the notification will get
#           withdrawn from screen again and will get delayed like a new notification
#[fullscreen_delay_everything]
#    fullscreen = delay
#[fullscreen_show_critical]
#    msg_urgency = critical
#    fullscreen = show

#[espeak]
#    summary = "*"
#    script = dunst_espeak.sh

#[script-test]
#    summary = "*script*"
#    script = dunst_test.sh

#[ignore]
#    # this notification will not be displayed
#    summary = "foobar"
#    format = ""

#[history-ignore]
#    # this notification will not be saved in history
#    summary = "foobar"
#    history_ignore = yes

#[skip-display]
#    # this notification will not be displayed, but will be included in the history
#    summary = "foobar"
#    skip_display = yes

#[signed_on]
#    appname = pidgin
#    summary = "*signed on*"
#    urgency = low
#
#[signed_off]
#    appname = pidgin
#    summary = *signed off*
#    urgency = low
#
#[says]
#    appname = pidgin
#    summary = *says*
#    urgency = critical
#
#[twitter]
#    appname = pidgin
#    summary = *twitter.com*
#    urgency = normal
#
#[stack-volumes]
#    appname = "some_volume_notifiers"
#    set_stack_tag = "volume"
#
# vim: ft=cfg

