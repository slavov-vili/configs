" [Plugin setup]
call pathogen#infect()               "Load bundles via Pathogen
Helptags                             "Reload plugin documentation 
filetype plugin indent on            "Use auto-indenting

" [Some basic settings]
set nocompatible                     "Use Vim mode instead of Vi
set foldenable                       "Enable folding
syntax on                            "Enable syntax highlighting

" [Set the theme]
if has('gui_running')
    colorscheme obsidian2            "Set GUI color scheme
else
    colorscheme elflord              "Set color scheme 
endif




" [Settings]

set autoindent                       "Follow indentation of last line
set autoread                         "Auto-detect file changes
set autowrite                        "Auto-save file before running
set backupdir=~/.backup,.,/tmp       "Do not put backups in current dir
set breakindent                      "Indent the text when wrapping
set cmdheight=2                      "Height of the command bar
set completeopt=menuone              "Auto-completion option menu
set confirm                          "Confirm :q when unsaved changes
set cursorline                       "Highlight current line
set directory=~/.backup,.,/tmp       "Don't put swaps in current dir
set equalalways                      "Make all windows equal in size
set encoding=utf-8
set expandtab                        "Replace tabs with spaces
set fileencoding=utf-8
set fileformat=unix
set foldcolumn=4                     "Width of column indicating folds
set foldlevelstart=42                "No closed folds at start
set foldmethod=indent                "Auto-folding of indented blocks
set foldnestmax=5                    "Maximum number of nested folds
set helplang=                        "Set help language to English
set hlsearch                         "Highlight search results
set ignorecase                       "Ignore case when searching
set incsearch                        "HL search matches while typing
set lazyredraw                       "Redraw screen only when need to
set linebreak                        "Don't split words when wrapping
set list
set listchars=tab:▸\ ,eol:¬          "Set Tab and EOL characters
let mapleader=","                    "Change leader key
set mouse=a                          "Enable mouse in all modes
set nobomb                           "No BOM
set noerrorbells visualbell t_vb=
set noswapfile                       "Disable swap files
" set nowrap                           "Disable line wrapping
set number                           "Turn on line numbers
set omnifunc=syntaxcomplete#Complete "Native auto-complete 
set shell=/bin/bash                  "Set the default shell
set shellcmdflag=-ic                 "Make vim read my .bashrc (I just love my aliases too much)
set shiftwidth=4                     "Intentation size
set showmatch                        "Highlight matching brackets
set smartcase                        "Except when using capital letters
set smartindent                      "Use smart indentation
set smarttab                         "Use smart tabs
set splitbelow                       "New splits always below
set splitright                       "New vSplits always to the right"
set tabstop=4
set wildmenu                         "Better auto-completion for cmd




" [Key mappings]

"Move the movement keys (ironic) 1 key to the right
noremap j h
noremap k j
noremap l k
noremap ; l
"Go to the Beginning/End/Middle of line
noremap J ^
noremap K $
noremap L :call cursor(line('.'), len(getline('.'))/2)<cr>
"Go to the Top/Bottom/Middle of screen
noremap <C-j> H
noremap <C-k> L
noremap <C-l> M
"gg => END
noremap G gg
noremap gg G
"Optical illusion ?
noremap p P
noremap P p
"Get over here!
"noremap za zz
"Have to fold sometimes
"noremap zz za
"% too far away :(
noremap <leader><Tab> %
"Toggle comment state of line
noremap <leader>cc <leader>c<space>
"Toggle whether to show relative line numbers
noremap <leader>` :set rnu!<cr>
"Toggle whether to highlight current column
noremap <leader><leader> :set cursorcolumn!<cr>
"I found it, now go away!
nnoremap <leader><space> :noh<cr>
"Toggle spellchecker
nnoremap <leader>en :setlocal spell! spelllang=en_us<cr>
nnoremap <leader>de :setlocal spell! spelllang=de_de<cr>
nnoremap <leader>bg :setlocal spell! spelllang=bg_bg<cr>
"Add a key combination for the run function
noremap <leader>r :Run<cr>

"Tab manipulation
"Open file in new tab
nnoremap <Tab>n      :tabnew 
"Tab goto
nnoremap <Tab>l :tabnext 
"Tab goto previous/next
nnoremap <Tab>j :<C-U>exe "tabnext " . (tabpagenr() - v:count1)<cr>
nnoremap <Tab>k :<C-U>exe "tabnext " . (tabpagenr() + v:count1)<cr>
"Tab goto first/last
nnoremap <Tab>J :tabfirst<cr>
nnoremap <Tab>K :tablast<cr>
"Tab moving
nnoremap <Tab>mj :tabm -1<cr>
nnoremap <Tab>mk :tabm +1<cr>
"Tab closing
nnoremap <Tab>e :tabclose<cr>

"Window manipulation
"Vertical split
nnoremap <leader>wds<cr> <C-W>v
"Horizontal split
nnoremap <leader>wss<cr> <C-W>s
"New (empty) window
nnoremap <leader>wdn :vnew 
nnoremap <leader>wsn :new 
"Move current window to its own tab
nnoremap <leader>w<Tab> <C-W>T
"Window navigation
nnoremap <leader>ww <C-W>w
nnoremap <leader>wj <C-W>h
nnoremap <leader>wk <C-W>j
nnoremap <leader>wl <C-W>k
nnoremap <leader>w; <C-W>l
"Window resizing
"TIP: <C-W>= makes ALL windows have normal shapes
nnoremap <C-Left>  5<C-W>>
nnoremap <C-Right> 5<C-W><
nnoremap <C-Down>  5<C-W>-
nnoremap <C-Up>    5<C-W>+
"Window close current
nnoremap <leader>we<cr> <C-W>q
"Window close others
nnoremap <leader>wo<cr> <C-W>o




" [Others]

let g:slime_target = "tmux"          "Tell slime to use tmux
let g:syntastic_enable_racket_racket_checker = 1

"Force vim to use Prolog syntax on .pl files
autocmd BufNewFile,BufRead *.pl set syntax=prolog
"Automatically retab files when opened
autocmd BufNewFile * :retab




" [User-defined functions]

"Call the Run function with the Run command
command Run execute "call Run()"     
"Function to run the current file in the cases of certain filetypes
function Run()
    "Always save file before running
    :w!
    "If it is a Python file
    if &filetype == 'python'
        exe '!python3 %'
    "If it is a Prolog file
    elseif &filetype == 'prolog'
        exe '!swipl %'
    "If it is a Java file
    "Compile and run
    elseif &filetype == 'java' 
        exe '!echo "Compiling..." && javac %'
        exe '!java %:r'
    "If it is a Haskell file
    "Just run in the interpreter
    elseif &filetype == 'haskell'
        exe '!ghci %'
    "If it is a Go file
    elseif &filetype == 'go'
        exe '!go run %'
    "If it is a Scala file
    "Compile and run
    elseif &filetype == 'scala'
        exe '!scala %'
        "exe '!echo \"Compiling...\" && scalac %'
        "exe '!scala %:r'
    "If it is a Racket file
    "Just run in the interpreter
    elseif &filetype == 'racket'
        exe '!racket -f % -i'
    "If it is a LaTeX file
    "Run pdflatex on it and open the pdf
    elseif &filetype == 'tex'
        exe '!pdflatex %'
    endif
endfunction
